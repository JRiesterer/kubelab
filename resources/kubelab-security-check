#!/bin/bash
# KubeLab Security Status Check

echo "KubeLab Security Status"
echo "======================"
echo

# Global variables to track results
PASSED_CHECKS=()
FAILED_CHECKS=()

# Helper functions
add_result() {
    local status=$1
    local check_name=$2
    local details=$3
    
    if [ "$status" = "PASS" ]; then
        PASSED_CHECKS+=("$check_name")
    else
        FAILED_CHECKS+=("$check_name|$details")
    fi
}

check_service() {
    local service=$1
    local check_name=$2
    if systemctl is-active --quiet "$service" 2>/dev/null; then
        add_result "PASS" "$check_name"
        return 0
    else
        add_result "FAIL" "$check_name" "Service not running or not installed"
        return 1
    fi
}

# Core Services
echo "Running core service checks..."

check_service "docker" "Docker Service"

# Kind Cluster
if sudo -u $SUDO_USER kubectl get nodes >/dev/null 2>&1; then
    add_result "PASS" "Kind Cluster"
else
    add_result "FAIL" "Kind Cluster" "Cluster not accessible or not running"
fi

# Falco Runtime Security
if systemctl is-active --quiet "falco" 2>/dev/null; then
    add_result "PASS" "Falco Service"
    
    # Falco JSON output
    if grep -q "^json_output: true" /etc/falco/falco.yaml 2>/dev/null; then
        add_result "PASS" "Falco JSON Output"
    else
        add_result "FAIL" "Falco JSON Output" "JSON output not enabled in falco.yaml"
    fi
    
    # Falco buffered outputs
    if grep -q "^buffered_outputs: true" /etc/falco/falco.yaml 2>/dev/null; then
        add_result "PASS" "Falco Buffered Outputs"
    else
        add_result "FAIL" "Falco Buffered Outputs" "Buffered outputs not enabled in falco.yaml"
    fi
    
    # Custom rules file
    if [ -f "/etc/falco/rules.d/k8s_security_rules.yaml" ]; then
        add_result "PASS" "Falco Custom Rules File"
    else
        add_result "FAIL" "Falco Custom Rules File" "Custom rules file missing at /etc/falco/rules.d/k8s_security_rules.yaml"
    fi
    
    # Custom rules referenced
    if grep -q "/etc/falco/rules.d/k8s_security_rules.yaml\|rules.d" /etc/falco/falco.yaml 2>/dev/null; then
        add_result "PASS" "Falco Rules Configuration"
    else
        add_result "FAIL" "Falco Rules Configuration" "Custom rules not referenced in falco.yaml"
    fi
    
    # Systemd override
    if [ -f "/etc/systemd/system/falco.service.d/override.conf" ]; then
        add_result "PASS" "Falco Systemd Override"
    else
        add_result "FAIL" "Falco Systemd Override" "Systemd logging override not configured"
    fi
else
    add_result "FAIL" "Falco Service" "Service not running or not installed"
fi

# Audit Daemon
if systemctl is-active --quiet "auditd" 2>/dev/null; then
    add_result "PASS" "Audit Daemon"
    
    # Custom audit rules
    if [ -f "/etc/audit/rules.d/99-kubelab-container.rules" ]; then
        add_result "PASS" "Audit Rules File"
    else
        add_result "FAIL" "Audit Rules File" "Custom audit rules missing at /etc/audit/rules.d/99-kubelab-container.rules"
    fi
    
    # Rules loaded
    loaded_rules=$(auditctl -l 2>/dev/null | grep "kubelab" | wc -l)
    if [ "${loaded_rules:-0}" -gt 0 ]; then
        add_result "PASS" "Audit Rules Loaded"
    else
        add_result "FAIL" "Audit Rules Loaded" "No KubeLab audit rules currently loaded"
    fi
    
    # Audit log
    if [ -f "/var/log/audit/audit.log" ] && [ -s "/var/log/audit/audit.log" ]; then
        add_result "PASS" "Audit Log"
    else
        add_result "FAIL" "Audit Log" "Audit log not found or empty"
    fi
else
    add_result "FAIL" "Audit Daemon" "Service not running or not installed"
fi

# File Integrity and Security
echo "Running file integrity and security checks..."

# AIDE Database
if [ -f /var/lib/aide/aide.db ]; then
    db_size=$(stat -c%s /var/lib/aide/aide.db 2>/dev/null || echo "0")
    if [ "$db_size" -gt 1000 ]; then
        add_result "PASS" "AIDE Database"
    else
        add_result "FAIL" "AIDE Database" "Database exists but is too small (less than 1KB)"
    fi
else
    add_result "FAIL" "AIDE Database" "Database not initialized at /var/lib/aide/aide.db"
fi

# Security Limits
if [ -f "/etc/security/limits.d/99-kubelab.conf" ]; then
    add_result "PASS" "Security Limits Configuration"
    if grep -q "soft core 0" /etc/security/limits.d/99-kubelab.conf 2>/dev/null; then
        add_result "PASS" "Core Dumps Disabled"
    else
        add_result "FAIL" "Core Dumps Disabled" "Core dumps not disabled in limits configuration"
    fi
else
    add_result "FAIL" "Security Limits Configuration" "Security limits not configured at /etc/security/limits.d/99-kubelab.conf"
fi

# Log Rotation
if [ -f "/etc/logrotate.d/kubelab" ]; then
    add_result "PASS" "Log Rotation"
else
    add_result "FAIL" "Log Rotation" "Log rotation not configured at /etc/logrotate.d/kubelab"
fi

# Core Dump Security
if grep -q "kernel.core_pattern=|/bin/false" /etc/sysctl.conf 2>/dev/null; then
    add_result "PASS" "Core Dump Security"
else
    add_result "FAIL" "Core Dump Security" "Core dumps not redirected to /bin/false in sysctl.conf"
fi

# Essential Security Tools
echo "Checking security tools..."
tools=("strace" "ltrace" "tcpdump" "lsof" "htop" "psmisc")
for tool in "${tools[@]}"; do
    if command -v "$tool" >/dev/null 2>&1; then
        add_result "PASS" "Tool: $tool"
    else
        add_result "FAIL" "Tool: $tool" "Tool not installed"
    fi
done

# Configuration Validation
echo "Running configuration validation..."

# Kubernetes cluster access
if sudo -u $SUDO_USER kubectl auth can-i get pods >/dev/null 2>&1; then
    add_result "PASS" "Kubernetes API Access"
else
    add_result "FAIL" "Kubernetes API Access" "User does not have proper cluster access"
fi

# Docker group membership
if groups $SUDO_USER 2>/dev/null | grep -q docker; then
    add_result "PASS" "Docker Group Membership"
else
    add_result "FAIL" "Docker Group Membership" "User not in docker group"
fi

# Kind cluster details
kind_clusters=$(sudo -u $SUDO_USER kind get clusters 2>/dev/null | wc -l)
if [ "${kind_clusters:-0}" -gt 0 ]; then
    add_result "PASS" "Kind Clusters Available"
    
    # Check current context
    current_context=$(sudo -u $SUDO_USER kubectl config current-context 2>/dev/null || echo "none")
    if echo "$current_context" | grep -q "kind"; then
        add_result "PASS" "Kind Context Active"
    else
        add_result "FAIL" "Kind Context Active" "Current context is not a kind cluster: $current_context"
    fi
else
    add_result "FAIL" "Kind Clusters Available" "No kind clusters found"
fi

# Output Results
echo ""
echo "Security Check Results"
echo "====================="
echo ""

# Display passed checks
if [ ${#PASSED_CHECKS[@]} -gt 0 ]; then
    echo "PASSED (${#PASSED_CHECKS[@]}):"
    for check in "${PASSED_CHECKS[@]}"; do
        echo "  [PASS] $check"
    done
    echo ""
fi

# Display failed checks
if [ ${#FAILED_CHECKS[@]} -gt 0 ]; then
    echo "FAILED (${#FAILED_CHECKS[@]}):"
    for failed in "${FAILED_CHECKS[@]}"; do
        check_name="${failed%%|*}"
        details="${failed##*|}"
        echo "  [FAIL] $check_name"
        if [ "$details" != "$check_name" ]; then
            echo "         $details"
        fi
    done
    echo ""
fi

# Summary
total_checks=$((${#PASSED_CHECKS[@]} + ${#FAILED_CHECKS[@]}))
echo "Summary: ${#PASSED_CHECKS[@]}/$total_checks checks passed"

if [ ${#FAILED_CHECKS[@]} -gt 0 ]; then
    exit 1
else
    echo "All security checks passed successfully"
    exit 0
fi

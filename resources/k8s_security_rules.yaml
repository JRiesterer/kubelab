# Falco rules for container escape and suspicious activity
# Using macro to exclude system/control-plane pods for a kind single-node lab

# Macro definition for system pod exclusion
- macro: system_pod_exclusion
  condition: >
    container.name contains "kind-control-plane" or
    container.name contains "coredns" or
    container.name contains "kindnet" or
    container.name contains "kube-apiserver" or
    container.name contains "kube-controller-manager" or
    container.name contains "kube-proxy" or
    container.name contains "kube-scheduler" or
    container.name contains "local-path-provisioner"

# Rules

- rule: shell_in_container
  desc: notice shell activity within a container
  condition: >
    container.id != host and
    evt.type = execve and
    evt.dir = < and
    not system_pod_exclusion and
    (proc.name = bash or proc.name = sh or proc.name = ksh)
  output: >
    shell in container |
    user=%user.name container_id=%container.id container_name=%container.name 
    shell=%proc.name parent=%proc.pname cmdline=%proc.cmdline
  priority: WARNING

- rule: write_to_host
  desc: container writing to sensitive host paths
  condition: >
    container.id != host and
    evt.type in (open, openat, creat, truncate) and
    (fd.name startswith "/host" or fd.name startswith "/etc") and
    not system_pod_exclusion
  output: >
    container writing to sensitive host path |
    user=%user.name container_id=%container.id container_name=%container.name
    file=%fd.name cmdline=%proc.cmdline
  priority: CRITICAL

- rule: docker_socket_access
  desc: container accessing host Docker socket
  condition: >
    container.id != host and
    evt.type in (open, openat, read, write) and
    fd.name="/var/run/docker.sock" and
    not system_pod_exclusion
  output: >
    container accessing docker.sock |
    user=%user.name container_id=%container.id container_name=%container.name
    cmdline=%proc.cmdline
  priority: CRITICAL

- rule: privileged_container
  desc: privileged container detected
  condition: >
    container.id != host and
    container.privileged = true and
    evt.type in (setns, clone, unshare) and
    not system_pod_exclusion
  output: >
    privileged container detected |
    user=%user.name container_id=%container.id container_name=%container.name
    cmdline=%proc.cmdline
  priority: CRITICAL

- rule: suspicious_capabilities
  desc: container adding capabilities
  condition: >
    container.id != host and
    evt.type = capset and
    not system_pod_exclusion
  output: >
    container added capabilities |
    user=%user.name container_id=%container.id container_name=%container.name
    cmdline=%proc.cmdline
  priority: WARNING

- rule: proc_mount_escape
  desc: container accessing host /proc
  condition: >
    container.id != host and
    evt.type in (open, openat) and
    fd.name startswith "/proc" and
    not system_pod_exclusion
  output: >
    container accessing host /proc |
    user=%user.name container_id=%container.id container_name=%container.name
    file=%fd.name cmdline=%proc.cmdline
  priority: CRITICAL
